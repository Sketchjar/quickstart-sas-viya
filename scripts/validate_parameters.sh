#!/bin/bash

EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
EC2_REGION=$(echo ${EC2_AVAIL_ZONE}  | sed "s/[a-z]$//")

#
# additional input parameter verification
#
# Parameter checking should happen as early as possible. We want to fail as quickly as we can.
# Most paramater checking happens in the template, but not all parameters can be verified there.
# For example, the mirror location might be a valid s3 bucket, but the contents of the bucket might not be a
# valid mirror.
# The code in this script covers those cases. It should be executed as early early as there is an
# environment available to run it.
#



##
## verify SSL certificate is valid, if specified
##
## Turns out the error generated by CFN for an invalid hosted zone is sufficient
## and early enough, so no additional check is needed:
## E.g.
## Server Certificate not found for the key: arn:aws:acm:us-east-1:869791842936:certificate/42ef3680-be89-4c80-ae5b-ed12309a2595
## (Service: AmazonElasticLoadBalancing; Status Code: 400;        Error Code: CertificateNotFound; ...
#
#if [ -n "{{SSLCertificateARN}}" ]; then
#
#  # Check the ARN to determine if this is an iam or acm certificate
#  CERT_ARN="{{SSLCertificateARN}}"
#  if [[ $CERT_ARN = *":iam:"* ]]; then
#      # iam certificate uses get-server-certificate
#      CERT_NAME=${CERT_ARN##*/}
#      aws --no-paginate --region "$EC2_REGION" iam get-server-certificate --server-certificate-name "$CERT_NAME"
#      RC=$?
#  else
#      # acm certificate uses describe-certificate
#      aws --no-paginate --region "$EC2_REGION" acm describe-certificate --certificate "$CERT_ARN"
#      RC=$?
#  fi
#
#  if [ ! $RC = 0 ]; then
#    echo "ERROR: SSL Certificate {{SSLCertificateARN}} does not exist in the current AWS account."
#  fi
#  exit $RC
#fi
#
#
#
##
## verify valid HostedZoneID and matching DNS name
##
## Turns out the error generated by CFN for an invalid hosted zone is sufficient
## and early enough, so no additional check is needed:
## e.g. No hosted zone found with ID: Z2BP7UMCNDE5Z8 (Service: AmazonRoute53; Status Code: 404; ...)
#
#if [[ -n "{{HostedZoneID}}"  && "{{DomainName}}" ]] ; then
#
#  aws --no-paginate --region "$EC2_REGION" route53 get-hosted-zone --id {{HostedZoneID}}
#  RC=$?
#  if [ ! $RC = 0 ]; then
#    echo "ERROR: Hosted Zone {{HostedZoneID}} does not exist in the current AWS account."
#  fi
#  exit $RC
#
#  # compare DNS entry used in the hosted zone with the given DNSName
#  HZDNS=$(aws --no-paginate --region "$EC2_REGION" route53 list-resource-record-sets --hosted-zone-id {{HostedZoneID}} --query 'ResourceRecordSets[?Type==`NS`].Name' --output text)
#
#  # fail the script if the specified DomainName does not match the hosted zone
#  if ! [[ "$HZDNS" == "{{DomainName}}." ]];
#  then
#     echo "ERROR: Value for DomainName=\"{{DomainName}}\" does not match domain \"${HZDNS:0:-1}\" in Hosted Zone {{HostedZoneID}}"
#     exit -1
#  fi
#
#fi

#
# verify that the mirror repository is valid
#
if [ -n "{{DeploymentMirror}}" ]; then

  if [[ $(echo -n "{{DeploymentMirror}}" | cut -c1-2 | tr [:lower:] [:upper:]) == S3 ]]; then

    # For s3:// : lowercase initial s, remove trailing slash if it exists
    DM=$(echo -n {{DeploymentMirror}} | sed "s/^S/s/" | sed "s+/$++"   )
    aws s3 ls ${DM}/entitlements.json
    RC=$?

  elif [[ $(echo -n "{{DeploymentMirror}}" | cut -c1-4 | tr [:lower:] [:upper:]) == HTTP ]]; then

    curl -L ${DM}/entitlements.json
    RC=$?

  fi

  if [ ! $RC = 0 ]; then
     echo "ERROR: DeploymentMirror location {{DeploymentMirror}} not valid or not accessible."
  fi

  exit $RC
fi